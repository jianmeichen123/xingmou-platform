#set($messageClass=$name.getMessageClassName($table))
#set($modelClass=$name.getModelClassName($table))
#set($messageVarName=$name.getMessageVarName($table))
#set($bizClass=$name.getBizClassName($table))
#set($primaryKeyVarName=$code.getVarName($table.primaryKey.memberColumns[0].propertyName))
#set($primaryKeyParameter=$code.getParameters($table.primaryKey.memberColumns))
#set($messageQueryClass=$name.getMessageQueryClassName($table))
#set($messageQueryVar=$name.getMessageQueryVarName($table))
#set($modelQueryClass=$name.getModelQueryClassName($table))
#set($modelQueryVar=$name.getModelQueryVarName($table))
#set($serviceVar=$name.getServiceVarName($table))
package ${mybatisgen.p.get("basePackage")}.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.alibaba.dubbo.config.annotation.Reference;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import ${mybatisgen.p.get("basePackage")}.view.common.MessageInfo;
import ${mybatisgen.p.get("basePackage")}.view.common.QueryResultInfo;
import ${name.getFullViewClassName($table)};
import ${name.getFullViewQueryClassName($table)};
import ${name.getFullServiceClassName($table)};

@Controller
@RequestMapping("${modelVar}")
public class ${modelClass}Controller {

    @Reference
	private ${name.getServiceClassName($table)} $serviceVar;

	@RequestMapping(value = "index", method = RequestMethod.GET)
	public ModelAndView index() {
		Map<String, Object> modelMap = new HashMap<String, Object>();
		return new ModelAndView("${modelVar}/index", modelMap);
	}

	@RequestMapping("query")
	@ResponseBody
	public MessageInfo<QueryResultInfo<${messageClass}>>  query${modelClass} ($messageQueryClass $messageQueryVar) {
		MessageInfo<QueryResultInfo<${messageClass}>> resultMessageInfo = ${serviceVar}.query${modelClass}($messageQueryVar);
		return resultMessageInfo;
	}

    @RequestMapping("create")
    @ResponseBody
    public MessageInfo<${table.primaryColumn.javaType}> create$modelClass($messageClass $messageVar){
        MessageInfo<${table.primaryColumn.javaType}> messageInfo =  ${serviceVar}.create$modelClass($messageVar);
        return messageInfo;
    }

    @RequestMapping("update")
    @ResponseBody
	public MessageInfo<Integer> update$modelClass($messageClass $messageVar){
		MessageInfo<Integer> messageInfo =  ${serviceVar}.update$modelClass($messageVar);
		return messageInfo;
	}

    @RequestMapping("get")
    @ResponseBody
	public MessageInfo<$messageClass> get$modelClass( $primaryKeyParameter ){
		MessageInfo<$messageClass> messageInfo =  ${serviceVar}.get$modelClass($primaryKeyVarName);
		return messageInfo;
	}

    @RequestMapping("getAll")
    @ResponseBody
    public MessageInfo<List<$messageClass>> getAll$modelClass(){
		MessageInfo<List<$messageClass>>  messageInfo = ${serviceVar}.getAll$modelClass();
		return messageInfo;
	}


	#foreach($index in $table.indexes)
	#if($index.isUnique())

	MessageInfo<$messageClass> ${sql.getIndexBizName($index)}(${code.getParameters($index.memberColumns)});

    @RequestMapping("${sql.getIndexBizName($index)}")
    @ResponseBody
	public MessageInfo<$messageClass> ${sql.getIndexBizName($index)}(${code.getParameters($index.memberColumns)}){

		MessageInfo<$messageClass> messageInfo = ${serviceVar}.${sql.getIndexBizName($index)}(${code.getParameterValues($index.memberColumns)});
		return messageInfo;
	}
	#else

    @RequestMapping("${sql.getIndexBizName($index)}")
    @ResponseBody
	public MessageInfo<List<$messageClass>> ${sql.getIndexBizName($index)}(${code.getParameters($index.memberColumns)}){
		MessageInfo<List<$messageClass>> messageInfo = ${serviceVar}.${sql.getIndexBizName($index)}(${code.getParameterValues($index.memberColumns)});
		return messageInfo;
	}
	#end
	#end

}
